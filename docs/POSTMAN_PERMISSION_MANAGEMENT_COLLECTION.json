{
	"info": {
		"_postman_id": "permission-management-module",
		"name": "Permission Management Module",
		"description": "Comprehensive API collection for managing permissions, roles, and access control in the Chatbot SAAS application. This collection includes all CRUD operations for permissions, permission groups, role assignments, and user permission checks.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "permission-management"
	},
	"item": [
		{
			"name": "üîê Permission Management",
			"item": [
				{
					"name": "üìã Permissions",
					"item": [
						{
							"name": "Get All Permissions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/permissions",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions"]
								},
								"description": "Retrieve all permissions for the authenticated user's organization. Supports filtering by category, resource, scope, and status."
							},
							"response": []
						},
						{
							"name": "Get Permission by ID",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/{{permission_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "{{permission_id}}"]
								},
								"description": "Retrieve a specific permission by its ID. Returns detailed information including relationships and computed fields."
							},
							"response": []
						},
						{
							"name": "Create New Permission",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"Delete Users\",\n  \"code\": \"delete_users\",\n  \"display_name\": \"Delete Users\",\n  \"description\": \"Allow users to delete other user accounts\",\n  \"resource\": \"users\",\n  \"action\": \"delete\",\n  \"scope\": \"organization\",\n  \"category\": \"user_management\",\n  \"is_dangerous\": true,\n  \"requires_approval\": true,\n  \"sort_order\": 100,\n  \"is_visible\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/permissions",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions"]
								},
								"description": "Create a new permission. All fields are validated and the permission is automatically assigned to the current organization."
							},
							"response": []
						},
						{
							"name": "Update Permission",
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"display_name\": \"Updated Permission Name\",\n  \"description\": \"Updated description for this permission\",\n  \"sort_order\": 150,\n  \"is_visible\": true\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/{{permission_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "{{permission_id}}"]
								},
								"description": "Update an existing permission. System permissions cannot be modified. Only non-system permissions can be updated."
							},
							"response": []
						},
						{
							"name": "Delete Permission",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/{{permission_id}}",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "{{permission_id}}"]
								},
								"description": "Delete a permission. System permissions and permissions assigned to roles cannot be deleted."
							},
							"response": []
						}
					],
					"description": "Core CRUD operations for managing permissions within an organization."
				},
				{
					"name": "üìÅ Permission Groups",
					"item": [
						{
							"name": "Get All Permission Groups",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/groups",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "groups"]
								},
								"description": "Retrieve all permission groups for the organization. Includes hierarchical structure and permission counts."
							},
							"response": []
						},
						{
							"name": "Create Permission Group",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"name\": \"User Management\",\n  \"code\": \"user_management\",\n  \"display_name\": \"User Management\",\n  \"description\": \"Permissions related to user management operations\",\n  \"category\": \"administration\",\n  \"parent_group_id\": null,\n  \"icon\": \"users\",\n  \"color\": \"#3B82F6\",\n  \"sort_order\": 10,\n  \"permission_ids\": [\"{{permission_id_1}}\", \"{{permission_id_2}}\"]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/groups",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "groups"]
								},
								"description": "Create a new permission group. Can optionally include permissions and have a parent group for hierarchical organization."
							},
							"response": []
						}
					],
					"description": "Manage permission groups for better organization and categorization of permissions."
				},
				{
					"name": "üë• Role Permissions",
					"item": [
						{
							"name": "Get Role Permissions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/roles/{{role_id}}/permissions",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "roles", "{{role_id}}", "permissions"]
								},
								"description": "Retrieve all permissions assigned to a specific role. Shows granted permissions with their details."
							},
							"response": []
						},
						{
							"name": "Assign Permissions to Role",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"permission_ids\": [\n    \"{{permission_id_1}}\",\n    \"{{permission_id_2}}\",\n    \"{{permission_id_3}}\"\n  ]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/roles/{{role_id}}/permissions",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "roles", "{{role_id}}", "permissions"]
								},
								"description": "Assign multiple permissions to a role. This will replace all existing permissions for the role with the new set."
							},
							"response": []
						},
						{
							"name": "Remove Permissions from Role",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"permission_ids\": [\n    \"{{permission_id_1}}\",\n    \"{{permission_id_2}}\"\n  ]\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/roles/{{role_id}}/permissions",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "roles", "{{role_id}}", "permissions"]
								},
								"description": "Remove specific permissions from a role. Only the specified permissions will be removed."
							},
							"response": []
						}
					],
					"description": "Manage permission assignments to roles for effective access control."
				},
				{
					"name": "üë§ User Permissions",
					"item": [
						{
							"name": "Get User Permissions",
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/users/permissions",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "users", "permissions"]
								},
								"description": "Retrieve all permissions for the currently authenticated user. Shows effective permissions from all assigned roles."
							},
							"response": []
						},
						{
							"name": "Check User Permission",
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Accept",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Content-Type",
										"value": "application/json",
										"type": "text"
									},
									{
										"key": "Authorization",
										"value": "Bearer {{auth_token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"resource\": \"users\",\n  \"action\": \"delete\",\n  \"scope\": \"organization\"\n}"
								},
								"url": {
									"raw": "{{base_url}}/api/v1/permissions/users/check-permission",
									"host": ["{{base_url}}"],
									"path": ["api", "v1", "permissions", "users", "check-permission"]
								},
								"description": "Check if the current user has a specific permission. Useful for frontend permission checks and conditional UI rendering."
							},
							"response": []
						}
					],
					"description": "User-specific permission operations for checking access rights and retrieving user permissions."
				}
			],
			"description": "Complete permission management system including CRUD operations, grouping, role assignments, and user permission checks."
		},
		{
			"name": "üîß Utility & Testing",
			"item": [
				{
					"name": "Health Check",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/health",
							"host": ["{{base_url}}"],
							"path": ["api", "health"]
						},
						"description": "Check if the API is running and healthy. No authentication required."
					},
					"response": []
				},
				{
					"name": "Authentication Test",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{auth_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/api/v1/me",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "me"]
						},
						"description": "Test authentication by retrieving current user information. Useful for verifying token validity."
					},
					"response": []
				}
			],
			"description": "Utility endpoints for testing and system health monitoring."
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Pre-request script for Permission Management Module",
					"console.log('Executing request for: ' + pm.request.name);",
					"",
					"// Set default headers if not present",
					"if (!pm.request.headers.has('Accept')) {",
					"    pm.request.headers.add({",
					"        key: 'Accept',",
					"        value: 'application/json'",
					"    });",
					"}",
					"",
					"// Log request details for debugging",
					"console.log('Request URL: ' + pm.request.url.toString());",
					"console.log('Request Method: ' + pm.request.method);"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Test script for Permission Management Module",
					"pm.test('Response time is less than 2000ms', function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(2000);",
					"});",
					"",
					"pm.test('Response has valid JSON structure', function () {",
					"    pm.response.to.have.jsonBody();",
					"});",
					"",
					"pm.test('Response includes success field', function () {",
					"    const jsonData = pm.response.json();",
					"    pm.expect(jsonData).to.have.property('success');",
					"});",
					"",
					"pm.test('Response includes message field', function () {",
					"    const jsonData = pm.response.json();",
					"    pm.expect(jsonData).to.have.property('message');",
					"});",
					"",
					"// Specific tests based on endpoint",
					"if (pm.request.url.path.includes('/permissions') && pm.request.method === 'GET') {",
					"    pm.test('Permissions endpoint returns data array', function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData.data).to.be.an('array');",
	"    });",
	"}",
	"",
	"if (pm.request.url.path.includes('/permissions') && pm.request.method === 'POST') {",
	"    pm.test('Permission creation returns 201 status', function () {",
	"        pm.response.to.have.status(201);",
	"    });",
	"",
	"    pm.test('Created permission has required fields', function () {",
	"        const jsonData = pm.response.json();",
	"        pm.expect(jsonData.data).to.have.property('id');",
	"        pm.expect(jsonData.data).to.have.property('name');",
	"        pm.expect(jsonData.data).to.have.property('code');",
	"    });",
	"}",
	"",
	"// Error handling tests",
	"if (pm.response.code >= 400) {",
	"    pm.test('Error response has proper structure', function () {",
	"        const jsonData = pm.response.json();",
	"        pm.expect(jsonData.success).to.be.false;",
	"        pm.expect(jsonData).to.have.property('message');",
	"    });",
	"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string",
			"description": "Base URL for the API server"
		},
		{
			"key": "auth_token",
			"value": "your_jwt_or_sanctum_token_here",
			"type": "string",
			"description": "Authentication token (JWT or Sanctum)"
		},
		{
			"key": "organization_id",
			"value": "your_organization_uuid_here",
			"type": "string",
			"description": "Organization UUID for multi-tenant operations"
		},
		{
			"key": "permission_id",
			"value": "permission_uuid_here",
			"type": "string",
			"description": "Permission UUID for testing specific permission operations"
		},
		{
			"key": "permission_id_1",
			"value": "permission_uuid_1_here",
			"type": "string",
			"description": "First permission UUID for testing bulk operations"
		},
		{
			"key": "permission_id_2",
			"value": "permission_uuid_2_here",
			"type": "string",
			"description": "Second permission UUID for testing bulk operations"
		},
		{
			"key": "permission_id_3",
			"value": "permission_uuid_3_here",
			"type": "string",
			"description": "Third permission UUID for testing bulk operations"
		},
		{
			"key": "role_id",
			"value": "role_uuid_here",
			"type": "string",
			"description": "Role UUID for testing role permission operations"
		},
		{
			"key": "user_id",
			"value": "user_uuid_here",
			"type": "string",
			"description": "User UUID for testing user-specific operations"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{auth_token}}",
				"type": "string"
			}
		]
	}
}
