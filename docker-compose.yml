version: '3.8'

services:
  # Laravel Application with FrankenPHP
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot_saas_app
    restart: unless-stopped
    ports:
      - "9000:80"
      - "8443:443"
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=chatbot_saas
      - DB_USERNAME=postgres
      - DB_PASSWORD=kambin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=kambin
      - RABBITMQ_VHOST=/
    volumes:
      # Source code synchronization (development friendly)
      - .:/app
      - /app/vendor
      - /app/node_modules
      # Storage synchronization
      - ./storage/logs:/app/storage/logs
      - ./storage/app:/app/storage/app
      - ./storage/framework:/app/storage/framework
      # Environment file synchronization
      - ./.env:/app/.env
      # Bootstrap cache synchronization
      - ./bootstrap/cache:/app/bootstrap/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: chatbot_saas_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: chatbot_saas
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: kambin
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d chatbot_saas"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: chatbot_saas_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: sh -c "mkdir -p /var/log/redis && redis-server /usr/local/etc/redis/redis.conf"
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # RabbitMQ Message Queue
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: chatbot_saas_rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: kambin
      RABBITMQ_DEFAULT_VHOST: /
    ports:
      - "5672:5672"
      - "15672:15672"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
      - ./docker/rabbitmq/rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
      - ./docker/rabbitmq/definitions.json:/etc/rabbitmq/definitions.json
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "status"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Queue Worker
  queue-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot_saas_queue_worker
    restart: unless-stopped
    command: php artisan queue:work --verbose --tries=3 --timeout=90
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=chatbot_saas
      - DB_USERNAME=postgres
      - DB_PASSWORD=kambin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=rabbitmq
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USER=admin
      - RABBITMQ_PASSWORD=kambin
      - RABBITMQ_VHOST=/
    volumes:
      # Source code synchronization
      - .:/app
      - /app/vendor
      - /app/node_modules
      # Storage synchronization
      - ./storage/logs:/app/storage/logs
      - ./storage/app:/app/storage/app
      - ./storage/framework:/app/storage/framework
      # Environment file synchronization
      - ./.env:/app/.env
      # Bootstrap cache synchronization
      - ./bootstrap/cache:/app/bootstrap/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - chatbot_network

  # Scheduler
  scheduler:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: chatbot_saas_scheduler
    restart: unless-stopped
    command: php artisan schedule:work
    environment:
      - APP_ENV=production
      - APP_DEBUG=false
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=chatbot_saas
      - DB_USERNAME=postgres
      - DB_PASSWORD=kambin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      # Source code synchronization
      - .:/app
      - /app/vendor
      - /app/node_modules
      # Storage synchronization
      - ./storage/logs:/app/storage/logs
      - ./storage/app:/app/storage/app
      - ./storage/framework:/app/storage/framework
      # Environment file synchronization
      - ./.env:/app/.env
      # Bootstrap cache synchronization
      - ./bootstrap/cache:/app/bootstrap/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chatbot_network

volumes:
  postgres_data:
  redis_data:
  rabbitmq_data:

networks:
  chatbot_network:
    driver: bridge
