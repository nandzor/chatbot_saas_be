
services:
  # Laravel Application with FrankenPHP
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: cte_app
    restart: unless-stopped
    ports:
      - "9000:80"
      - "8443:443"
    env_file:
      - ./.env
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=cte
      - DB_USERNAME=postgres
      - DB_PASSWORD=kambin
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - QUEUE_CONNECTION=database
      - N8N_BASE_URL=http://host.docker.internal:5678
      - N8N_API_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJiOTNjNWI5YS1iZGY4LTRiNjYtYmJmMi05YjlmNjQ3NTliNDgiLCJpc3MiOiJuOG4iLCJhdWQiOiJwdWJsaWMtYXBpIiwiaWF0IjoxNzU3MzA5NjU3fQ.UkSlwFR_5k5CB2Ws3lzMsRn6U2ZpBa0UX1qSoGIACJc
      - WAHA_BASE_URL=http://host.docker.internal:3000
    volumes:
      # Source code synchronization (development friendly)
      - .:/app
      - /app/vendor
      - /app/node_modules
      # Use named volumes for storage to avoid host permission issues
      - app_storage:/app/storage
      # Environment file synchronization
      - ./.env:/app/.env
      # Bootstrap cache synchronization
      - app_cache:/app/bootstrap/cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - chatbot_network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health", "||", "exit", "1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    container_name: cte_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: cte
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: kambin
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d cte"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: cte_redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
      - ./docker/redis/redis.conf:/usr/local/etc/redis/redis.conf
    command: sh -c "mkdir -p /var/log/redis && redis-server /usr/local/etc/redis/redis.conf"
    networks:
      - chatbot_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
  redis_data:
  app_storage:
  app_cache:

networks:
  chatbot_network:
    driver: bridge
